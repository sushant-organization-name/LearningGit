# Advanced Git Topics
HEAD -> Last commit on the current branch

# Get the commit IDs using (hist is the alias we created in our Basics Lectures"
git hist

# Get differences between your HEAD and the commit id
git diff commit_id HEAD

# HEAD in repo git local v/s working directory
git diff

# More help
git diff --help

-----------------------------------------------------------------------------------			

# Branches and Merges

# Types of Merge
Fast Forward Merge - When no additional work happens on master branch and the only work happens in the newly created branch and then it is merged directly with the master. 
Automatic Merge - When no conflicts are defined in the master v/s branch 
Manual Merge - When Git can not resolve the conflicts that happens on the same branch by the user A and user B 

-----------------------------------------------------------------------------------			

# Special Pointers in Git

# HEAD
Points to the last commit of the current branch i.e. in the local user git repo

-----------------------------------------------------------------------------------			

# Current branch check
git branch

# create a new branch updates and switch to a new branch
git checkout -b updates

# Previously used commands to commit the changes to user git local 
git add .
git commit -m "Your message"

# Switch branches (from updates to master branch)
git checkout master

# Merge changes from advanced branch to master branch
git merge updates i.e. git merge branch_name 

# Check history using alias. This should show HEAD, master and updates branch on same location i.e. same commit id. 
git hist

# Delete a branch from your local after merging in your changes
git branch -d branch_name
 
-----------------------------------------------------------------------------------

# Resolve Conflicts - From Master Branch
git merge branch_name

# Resolve the Conflicts and save the file. Once done, you need to commit the changes to your local git repo. 
git commit -am "Resolving Conflicts"

-----------------------------------------------------------------------------------

# Tags in GIT - Specify a commit. If not, it will be HEAD. 

# Lighweight tag, not much info
git tag mytag

# Delete a tag
git tag -d mytag

# Annotated tag 
git tag -a v1.0 -m "Release v1.0"

# lists your tags
git tag --list

# Show the details associated with the tag name
git show tag_name

-----------------------------------------------------------------------------------

# Stashing in Git - 

# stores the changes that we were performing in an array
git stash

# list the stash 
git stash list

# status of the repo 
git status

# take out the saved changes in the stash 
git stash pop 

# lists the stash - it should be empty after popping the changes out of Stack
git stash list 

-----------------------------------------------------------------------------------

# Time Travel - Reset and Reflog (used when you need to rollback your commit)

# gets the history of your commits
git hist (as per alias)

# Least destructive reset, changes the HEAD where it is pointed to. You will still have your changes in the working directory
# File is unstaged and placed in our working directory 
git reset commit_id --soft 

# Default reset is --mixed. You dont have to mention it explicitly but no harm in mentioning it as well. 

***************REMOVE THIS USING RESET***************
 
