# Advanced Git Topics
HEAD -> Last commit on the current branch

# Get the commit IDs using (hist is the alias we created in our Basics Lectures"
git hist

# Get differences between your HEAD and the commit id
git diff commit_id HEAD

# HEAD in repo git local v/s working directory
git diff

# More help
git diff --help

-----------------------------------------------------------------------------------			

# Branches and Merges

# Types of Merge
Fast Forward Merge - When no additional work happens on master branch and the only work happens in the newly created branch and then it is merged directly with the master. 
Automatic Merge - When no conflicts are defined in the master v/s branch 
Manual Merge - When Git can not resolve the conflicts that happens on the same branch by the user A and user B 

-----------------------------------------------------------------------------------			

# Special Pointers in Git

# HEAD
Points to the last commit of the current branch i.e. in the local user git repo

-----------------------------------------------------------------------------------			

# Current branch check
git branch

# create a new branch updates and switch to a new branch
git checkout -b updates

# Previously used commands to commit the changes to user git local 
git add .
git commit -m "Your message"

# Switch branches (from updates to master branch)
git checkout master

# Merge changes from advanced branch to master branch
git merge updates i.e. git merge branch_name 

# Check history using alias. This should show HEAD, master and updates branch on same location i.e. same commit id. 
git hist

# Delete a branch from your local after merging in your changes
git branch -d branch_name
 
-----------------------------------------------------------------------------------

# Resolve Conflicts - From Master Branch
git merge branch_name

# Resolve the Conflicts and save the file. Once done, you need to commit the changes to your local git repo. 
git commit -am "Resolving Conflicts"

-----------------------------------------------------------------------------------

# Tags in GIT - Specify a commit. If not, it will be HEAD. 

# Lighweight tag, not much info
git tag mytag

# Delete a tag
git tag -d mytag

# Annotated tag 
git tag -a v1.0 -m "Release v1.0"

# lists your tags
git tag --list

# Show the details associated with the tag name
git show tag_name

-----------------------------------------------------------------------------------

# Stashing in Git - 

# stores the changes that we were performing in an array
git stash

# list the stash 
git stash list

# status of the repo 
git status

# take out the saved changes in the stash 
git stash pop 

# lists the stash - it should be empty after popping the changes out of Stack
git stash list 

-----------------------------------------------------------------------------------

# Time Travel - Reset and Reflog (used when you need to rollback your commit)

# gets the history of your commits
git hist (as per alias)

# Least destructive reset, changes the HEAD where it is pointed to. You will still have your changes in the working directory
# File is unstaged and placed in our working directory 
git reset commit_id --soft 

# Default reset is --mixed. You dont have to mention it explicitly but no harm in mentioning it as well. 
git reset commit_id --mixed

## SOFT
- A - B - C (master)
HEADpoints to C and the index matches C.

When we run git reset --soft B, master (and thus HEAD) now points to B, but the index still has the changes from C; 
git status will show them as staged. So if we run git commit at this point, we'll get a new commit with the same changes
as C.

## MIXED 
- A - B - C (master)
Now let's do git reset --mixed B. (Note: --mixed is the default option). Once again, master and  HEAD point to B,
but this time the index is also modified to match B. If we run git commit at this point, nothing will happen since
the index matches HEAD. We still have the changes in the working directory, but since they're not in the index,
git status shows them as unstaged. To commit them, you would git add and then commit as usual.

## HARD
And finally, --hard is the same as --mixed (it changes your HEAD and index), except that --hard also modifies your 
working directory. If we're at C and run git reset --hard B, then the changes added in C, as well as any uncommitted
changes you have, will be removed, and the files in your working copy will match commit B. Since you can permanently
lose changes this way, you should always run git status before doing a hard reset to make sure your working directory
is clean or that you're okay with losing your uncommitted changes.

git reset commit_id --hard
 
# Reflog (get history back using reflog if you have done a hard commit and want to regain your changes!)
git reflog

# Syntax to get your changes/history back (commit_id is the commit you want to go back to)
git reset --hard commit_id