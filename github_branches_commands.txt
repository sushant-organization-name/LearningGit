# GitHub Create a new Branch

You will be on master branch by default on github. In order to create a new branch, in the branch dropdown, write the name of the
new branch that you want to create. 

Once done, you will find a new branch that is listed in the dropdown and github automatically changes your branch from master 
to example.

-----------------------------------------------------------------------------------			

# Create branch locally
git checkout -b branch_name

# remove a file
git rm file_name.txt
git status

# push the newly created branch to github
git push -u remote_name(origin) branch_name 

	-u sets up the tracking relationship between the local and remote branch. 
	
# Push and Pull without specifying the name of the branch as you have set up the tracking relationship earlier
git push 
git pull

-----------------------------------------------------------------------------------			

# Merge branch locally 
git merge branch_name

-----------------------------------------------------------------------------------			

# Remove dead/deleted remote branches
git fetch -p

# Delete branch locally
git branch -d branch_name

-----------------------------------------------------------------------------------			

# Link a local branch to the already created branch in remote repo (by you or someone else)

# Create a new branch from GitHub UI
# Edit a file from Github & commit it( if you want! )

# Fetch everything from remote repo to local repo 
git fetch 

# See all the branches (local + remote)
git branch -a

# It will only work in single remotes repo. Git will figure out and look for the branch name in local and if it fails, it will 
# look into remote repo. Branch name is unique among all your remotes, it will create.  
git checkout branch_name_same_as_remote_branch_name

-----------------------------------------------------------------------------------

# Pull all the changes from master and branches in remote repo to your working directory
git pull --all

# Merge your local changes to the branch
git merge branch_name

# Pull all the changes from master and branches in remote repo to your local repo and then working directory
git fetch --all
git pull

-----------------------------------------------------------------------------------

# Delete a remote branch from your local command line
git push origin :branch_name_to_be_deleted

-----------------------------------------------------------------------------------

# Pull with Rebase

Rebase: rewinds the current commits to the current state of the branch to a point to where your branch you are merging in
originally diverged. Then playing back to commits that happened you want to bring in and then on top of that playing to any 
commits to the branch you are currently on

# Make an update on any of the file in the Github (other peers can make the commit too)
# Now make any changes in your local working directory > commit it. 
# You remember now to fetch the changes from your remote repo to your local repo. 
# git status and you will see the message "Your local branch and origin/branch_name have diverged"
# git pull --rebase

The last command will rewind the HEAD changes in your local branch, put the changes from remote to your local, and then place 
the changes on top of that. 

EXACT MESSAGE -> "First, rewinding head to replay your work on top of it..."

-----------------------------------------------------------------------------------

# Github Graphs
git hist (alias)
git log --oneline --graph

-----------------------------------------------------------------------------------

# Resolve Conflicts
you can use a merge tool in order to resolve changes
git commit -m "Changes that you made should be commited"

-----------------------------------------------------------------------------------

# Tags in git

# shows the list tags
git tag 

# create a tag - tag_name is the name of the tag and branch_name is the branch you want this tag to be associated with
git tag tag_name branch_name

# Annotated tags - we have the option of using git show command specifying the tag name 
git tag -a 'tag_name' -m 'Message' commit_id

# Push a tag name to your Git repo
git push remote_name(origin) tag_name

# Push all tags at once in git
git push --tags

# Delete a tag from local repo
git tag -d tag_name

# Push the deleted tag or update the deleted tag in github repo
git push origin :deleted_tag_name

# Update an existing tag to point to latest commit id
git tag -f existing_tag_name latest_commit_id

git push remote_name tag_name -> This will give a reject message as branch_name already exists on Github.

# Force push the commit
git push --force remote_name tag_name

-----------------------------------------------------------------------------------

# Comparisions in Github

# One way to check comparisions is create a pull request and then move to compare section between different branches. 



-----------------------------------------------------------------------------------

# Rename a file

-----------------------------------------------------------------------------------

# merge remote repo to master remote branch

